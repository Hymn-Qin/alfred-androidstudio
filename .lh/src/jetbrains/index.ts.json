{
    "sourceFile": "src/jetbrains/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1690195036062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1690195036062,
            "name": "Commit-0",
            "content": "import fs from \"fs\";\nimport os from \"os\";\nimport { Element, xml2js } from \"xml-js\";\nimport path from \"path\";\nimport { RecentProjectsManager } from \"./types/RecentProjectsManager\";\nimport { promisify } from \"util\";\n\nexport type JetbrainsApp =\n  | \"WebStorm\"\n  | \"IntelliJIdea\"\n  | \"DataGrip\"\n  | \"PyCharm\"\n  | \"AndroidStudio\";\n\nexport class Jetbrains {\n  optionsPath(app: JetbrainsApp) {\n    const preferencesBasePath = `${os.homedir()}/Library/Application Support/${\n      app === \"AndroidStudio\" ? \"Google\" : \"JetBrains\"\n    }/`;\n    const folders = fs.readdirSync(preferencesBasePath);\n    const appDir = folders\n      .filter((name) => name.startsWith(app))\n      .reduce((p, v) => (p && p > v ? p : v), \"\");\n    if (!appDir) {\n      throw new Error(\"Not Found Application\");\n    }\n    return path.join(preferencesBasePath, appDir, \"options\");\n  }\n\n  private getOptionsFileObjSync(app: JetbrainsApp, fileName: string) {\n    const recentPreferences = fs.readFileSync(\n      path.join(this.optionsPath(app), fileName),\n      { encoding: \"utf8\" }\n    );\n    return this.resolveFileContent(recentPreferences);\n  }\n  private async getOptionsFileObj(app: JetbrainsApp, fileName: string) {\n    let readFile = promisify(fs.readFile);\n    const recentPreferences = await readFile(\n      path.join(this.optionsPath(app), fileName),\n      { encoding: \"utf8\" }\n    );\n    return this.resolveFileContent(recentPreferences);\n  }\n\n  private resolveFileContent(file: string) {\n    const recentPreferencesObj = xml2js(file) as Element;\n    return this.resolveElement(recentPreferencesObj);\n  }\n\n  private replaceStringValue(value?: string | number) {\n    if (typeof value === \"string\") {\n      return value.replace(\"$USER_HOME$\", os.homedir());\n    }\n    return \"\";\n  }\n\n  private resolveElement(element: Element): any {\n    switch (element.name) {\n      case undefined:\n      case \"application\":\n        return this.resolveElement(element.elements![0]);\n      case \"map\":\n        return new Map(element.elements!.map((i) => this.resolveElement(i)));\n      case \"entry\":\n        return [\n          this.replaceStringValue(element.attributes!.key)!,\n          this.replaceStringValue(element.attributes!.value) ??\n            this.resolveElement(element.elements![0]),\n        ];\n      case \"value\":\n        return this.resolveElement(element.elements![0]);\n      case \"option\":\n        return {\n          [this.replaceStringValue(element.attributes!.name)!]:\n            this.replaceStringValue(element.attributes!.value) ??\n            this.resolveElement(element.elements![0]),\n        };\n      case \"frame\":\n        return {\n          frame: element.attributes,\n        };\n      default:\n        return {\n          ...element.attributes,\n          ...element.elements?.reduce(\n            (p, v) => ({\n              ...p,\n              ...this.resolveElement(v),\n            }),\n            {}\n          ),\n        };\n    }\n  }\n\n  getRecentProjectsManagerSync(app: JetbrainsApp): RecentProjectsManager {\n    return this.getOptionsFileObjSync(app, \"recentProjects.xml\");\n  }\n  async getRecentProjectsManager(\n    app: JetbrainsApp\n  ): Promise<RecentProjectsManager> {\n    return this.getOptionsFileObj(app, \"recentProjects.xml\");\n  }\n}\n\nlet jetbrains = new Jetbrains();\nexport default jetbrains;\nexport { RecentProjectsManager };\n"
        }
    ]
}